# 画面フロー v2 要件設計

```
開始画面
   ↓
パーティー選択画面（6体選ぶ）
   ↓
出場モンスター選択画面（6体→3体）
   ↓
対戦画面
   ↓
リザルト画面
```

---

## 1. 開始画面

**目的**

* ゲームの世界観やルールを知らせ、ゲームを開始させる

**メインUI**

* タイトルロゴ
* [ゲーム開始]ボタン → パーティー選択へ
* [遊び方]ボタン → モーダル表示
* 音量・言語設定

---

## 2. パーティー選択画面 (6体)

**目的**

* 手持ちモンスターから6体を選び、バトル用パーティーを編成する

**UI構成**

* **モンスタースポット ×6**：各スポットにモンスターが立つ場所を用意。

  * 初期状態：空（シルエットまたは「未設定」表示）
  * 各スポット下に「モンスターを選ぶ」ボタンを配置。
* **モンスター選択モーダル**：

  * 「モンスターを選ぶ」ボタンを押すと表示。
  * モンスター一覧を縦スクロールで表示。
  * モンスターを選択するとモーダルを閉じ、選択したモンスターが対応するスポットに表示される。
* **選択状態表示**：各スポットに設定済みモンスターのアイコン・名前・属性。
* **進行ボタン**：

  * [次へ]：6つのスポットすべてにモンスターが選択されている場合のみ有効化。
  * [戻る]：開始画面へ戻る。

**処理フロー**

1. 「モンスターを選ぶ」ボタン押下 → モンスター選択画面（モーダル）を表示。
2. モンスター選択 → 選択データをパーティー選択画面へ返す。
3. スポットにモンスター表示を反映。
4. 全6スポットが埋まったら「次へ」ボタンを有効化。

---

## 3. 出場モンスター選択画面 (6→3)

**目的**

* 登録した6体の中から3体を出場メンバーとして選出。

**UI**

* パーティーモンスターリスト (6体)
* 出場スロット(3)、控え(3)
* [出場に設定]ボタン（タップで上段スロットへ移動）
* [次へ]ボタン (3体で有効)
* [戻る]ボタン

---

## 4. 対戦画面 (Battle)

**目的**

* 3体 vs 3体 のターンバトルを実行し、勝敗を決定する

**UI**

* 味方・敵モンスターカード
* HP/ST バー、名前、属性アイコン
* コマンドボタン： たたかう / 交代 / パス
* 技選択ウィンドウ（横方式リスト）
* バトルログ（重要イベント強調）
* ターン表示 / 対戦終了判定

---

## 5. リザルト画面

**目的**

* 勝敗と戦闘結果を表示し、再戦への導線を提供

**UI**

* 勝敗表示 (Victory / Defeat)
* 経過ターン数、弱点ヒット数、ST不足回数などの統計
* [再戦する]ボタン → 対戦画面へ
* [編成に戻る]ボタン → パーティー選択へ

---

## 共通設計

* 一画面に情報をまとめ、**縦スクロール不要**。
* モーダル/シート内のみ縦スクロール可。
* ボタンDockは下部固定 (次へ/戻る)。
* 全画面縦スクロール禁止（`overflow:hidden`）。
* モーダル内リストは`overflow-y:auto`で可。

---

## 2-1. モンスター選択モーダル（パーティー選択画面から起動）

**目的**

* 各スポットの「モンスターを選ぶ」から起動し、手持ち一覧から1体を選択してスポットへ反映する。

**起動元・戻り先**

* 起動元：パーティー選択画面の各スポット（SpotIndex 1〜6）
* 戻り先：同スポット（選択結果を即反映）。モーダルは閉じる。

**レイアウト/サイズ**

* SP：Bottom Sheet（幅100vw / 高さ 最大75vh、角丸16px）
* PC/Tablet：Centered Modal（最大幅 720px / 最大高 80vh）
* コンテンツ領域のみ `overflow-y:auto` で縦スクロール可

**UI構成**

* ヘッダ：タイトル「モンスターを選ぶ」、現在の選択対象スポット表示（例：Spot 3）
* ツールバー：検索（名前/属性）、絞り込み（属性タグ）、並び替え（HP/ATK/DEF/SPD/総合）
* 一覧：カードグリッド（2列：SP / 3列：PC）

  * カード要素：

    * サムネイル / 属性バッジ
    * 名前
    * ミニステータス（HP/ATK/DEF/SPD をバー or ピクト）
    * 状態バッジ：

      * 「✔ 選択済（Spot n）」＝他スポットで使用中
      * 「使用可」
    * [このモンスターにする] ボタン
  * 長押し/ホバー：詳細プレビュー（説明、得手/不得手、推奨役割）
* フッタ：

  * [キャンセル]（モーダルを閉じる / 反映なし）

**動作仕様**

* 選択：

  1. カードの[このモンスターにする]押下で、その個体IDを `SpotIndex` に割当
  2. モーダルは即時クローズ → 元画面スポットへ反映
* 重複制御：

  * 既に他のスポットで選択された同一モンスターIDは **デフォルトで選択不可**（二重割当防止）。
  * ただし「同じ種別の別個体」を実装する場合は個体IDで判定（将来拡張）。
* 上書き：

  * スポットに既存モンスターがある場合、選択で **上書き**（差し替え）
* 埋まり状況：

  * 上部に「現在の編成：n/6」を表示。n==6 のときもモーダルは開けるが、選択すると **いずれかのスポットを置換**（直前に選択した起動元スポットへ上書き）

**バリデーション/メッセージ**

* 重複選択を試みた：Toast「このモンスターは別スポットで使用中です」
* 検索結果0件：空状態表示（“条件に一致するモンスターがいません”）
* 反映成功：短いToast「Spot 3 に『フレイムリン』を設定しました」

**アクセシビリティ/操作**

* フォーカス管理：オープン時に検索入力へフォーカス。Enterで最初のカードに移動。
* キーボード：↑↓←→でカード移動、Enterで選択、Escで閉じる。
* SRテキスト：

  * モーダルに `role="dialog" aria-labelledby="modal-title" aria-describedby="modal-desc"`
  * カードのボタンに `aria-label="Spot 3 にフレイムリンを設定"`

**テレメトリ（任意/開発時）**

* `open_modal_select_monster({spot})`
* `filter_monster({q, attr, sort})`
* `choose_monster({spot, monsterId})`
* `reject_duplicate({spot, monsterId})`

**状態管理**

```ts
// 疑似型
type PartySpots = (MonsterId|null)[]; // 長さ6
interface ModalState {
  open: boolean;
  targetSpot: number; // 0..5
  query: string;
  filters: { attr?: string };
  sort: 'hp'|'atk'|'def'|'spd'|'total';
}
```

**処理フロー（シーケンス）**

1. ユーザー：Spot n の「モンスターを選ぶ」
2. UI：`ModalState = { open:true, targetSpot:n }`
3. ユーザー：検索/絞り込み/並び替えで候補を絞る
4. ユーザー：カードの[このモンスターにする]
5. コア：`if (monsterId in PartySpots) -> Toast & 中止`
6. コア：`PartySpots[targetSpot] = monsterId`
7. UI：モーダルを閉じ、Spot n の表示を更新
8. 監視：`if (PartySpots` の `null` が0件) → 「次へ」ボタンを有効化

```
// 次へ判定（疑似）
const canNext = PartySpots.every(id => id !== null);
```

**エッジケース**

* 既存選択の解除：スポット側で「× 解除」ボタンを用意（解除で空に戻す / nが減ると次へは自動で無効化）
* すべて埋まった状態で他スポットの変更：正常。起動元スポットが置換対象。
* データロード失敗：空状態＋リトライボタン表示。

**将来拡張ヒント**

* 比較ビュー：カード2枚まで固定してステ比較
* おすすめ順：相性・役割に応じたレコメンド並び
* タグ保存：直近の検索/絞り込み条件を保持（localStorage）

---

## 2-2. モンスター選択モーダル 拡張仕様（モンスター＆技選択ボタン）

**目的**

* モーダル内でモンスター選択と技セットを連続的に行えるようにする。

**UI構成（追加）**

* モーダル上部に2つのタブボタンを配置：

  * [モンスターを選ぶ]ボタン
  * [技を選ぶ]ボタン（初期は無効化）
* コンテンツエリアはボタン状態に応じて表示を切り替える。

**ボタン動作**

* 「モンスターを選ぶ」タブ：

  * `monsters.js` に登録されている全モンスターを一覧表示。
  * モンスターを選択すると選択済み状態となり、スポットに反映。
  * 選択後、「技を選ぶ」ボタンが有効化される。
* 「技を選ぶ」タブ：

  * 有効化条件：モンスターが選択済み。
  * `moves.js` に登録されている技を一覧表示（属性・威力・命中・STなど）。
  * モンスターに最大4つまで技をセット可能。
  * 技選択時はチェックボックス形式で、選択数が4を超えるとトースト警告を表示して拒否。

**処理フロー**

1. 「モンスターを選ぶ」タブを開く → `monsters.js` の全データをロード。
2. モンスターを1体選択 → `selectedMonster = monsterId` を保持。
3. 「技を選ぶ」ボタンを有効化。
4. ユーザーが「技を選ぶ」ボタンを押す → `moves.js` をロードし、技リストを表示。
5. 技を最大4つ選択 → `selectedMoves = [moveId1, moveId2, ...]` としてモンスターに紐づけ。
6. [完了] ボタンでモーダルを閉じ、選択結果（モンスター＋技4つ）をスポットへ反映。

**状態管理（拡張）**

```ts
interface ModalState {
  open: boolean;
  targetSpot: number; // 0..5
  mode: 'monster' | 'moves'; // 現在のタブ状態
  selectedMonster: MonsterId | null;
  selectedMoves: MoveId[];
  query: string;
  filters: { attr?: string };
  sort: 'hp'|'atk'|'def'|'spd'|'total';
}
```

**バリデーション/制約**

* モンスター未選択で「技を選ぶ」を押下：Toast「先にモンスターを選んでください」。
* 技選択が4を超えた：Toast「技は4つまで選択できます」。
* モンスター選択後にキャンセルして閉じる場合：選択情報を破棄。
* 技4つ未満でも保存可（空枠は未設定扱い）。

**UI挙動**

* タブ切替時、選択内容は保持（戻っても消えない）。
* 技選択リストは属性色付きカード表示。
* 各技カードには：名前／属性バッジ／威力／命中率／ST消費／説明。

**反映仕様**

* モンスター選択時：対象スポットにモンスター画像・名前を表示。
* 技選択完了時：スポット下に技名リスト（4枠）を表示。
* モンスター変更時：前の技セットは初期化。

**テレメトリ（追加）**

* `open_moves_tab({monsterId})`
* `select_move({monsterId, moveId})`
* `reject_move_overlimit({monsterId})`

**将来拡張**

* 技ソート（属性／威力順／消費ST順）
* 技のおすすめ表示（モンスター属性との相性良）
* 技の一括解除・ランダム選択機能
